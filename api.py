{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c86d7908-e0a0-48c7-854a-b8b9c0051625",
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask, request\n",
    "from flask_restx import Api, Resource, fields\n",
    "import pandas as pd\n",
    "import joblib\n",
    "import os\n",
    "\n",
    "# === Cargar modelo ===\n",
    "modelo = joblib.load(os.path.join(os.path.dirname(__file__), 'modelo_catboost.pkl'))\n",
    "\n",
    "# === Variables originales esperadas ===\n",
    "variables_originales = [\n",
    "    'duration_ms', 'danceability', 'energy', 'loudness', 'speechiness',\n",
    "    'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo',\n",
    "    'explicit', 'key', 'mode', 'time_signature',\n",
    "    'artists', 'album_name', 'track_name', 'track_genre'\n",
    "]\n",
    "\n",
    "variables_categoricas = ['artists', 'album_name', 'track_name', 'track_genre']\n",
    "\n",
    "# === Configuración de Flask ===\n",
    "app = Flask(__name__)\n",
    "api = Api(app, version='1.0', title='🎵 API de Popularidad Spotify',\n",
    "          description='Predicción de popularidad con CatBoost',\n",
    "          doc='/docs')\n",
    "\n",
    "ns = api.namespace('predict', description='Operaciones de predicción')\n",
    "\n",
    "# === Modelo de entrada ===\n",
    "entrada_modelo = api.model('EntradaModelo', {\n",
    "    var: fields.String(required=True, description=f'Valor de {var}') if var in variables_categoricas\n",
    "    else fields.Float(required=True, description=f'Valor de {var}')\n",
    "    for var in variables_originales\n",
    "})\n",
    "\n",
    "# === Endpoint POST: predicción vía JSON ===\n",
    "@ns.route('/')\n",
    "class Prediccion(Resource):\n",
    "    @ns.expect(entrada_modelo)\n",
    "    def post(self):\n",
    "        datos = [request.json[var] for var in variables_originales]\n",
    "        df = pd.DataFrame([datos], columns=variables_originales)\n",
    "        pred = modelo.predict(df)[0]\n",
    "        return {'popularidad_estimada': round(pred, 2)}, 200\n",
    "\n",
    "# === Endpoint GET: predicción por URL (opcional) ===\n",
    "@ns.route('/params')\n",
    "@ns.doc(params={var: f'Valor de {var}' for var in variables_originales})\n",
    "class PrediccionConParametros(Resource):\n",
    "    def get(self):\n",
    "        try:\n",
    "            datos = [\n",
    "                request.args.get(var) if var in variables_categoricas\n",
    "                else float(request.args.get(var, 0))\n",
    "                for var in variables_originales\n",
    "            ]\n",
    "            df = pd.DataFrame([datos], columns=variables_originales)\n",
    "            pred = modelo.predict(df)[0]\n",
    "            return {'popularidad_estimada': round(pred, 2)}, 200\n",
    "        except Exception as e:\n",
    "            return {'error': str(e)}, 400\n",
    "\n",
    "# === Ejecutar la aplicación ===\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=False, use_reloader=False, host='0.0.0.0', port=5000)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
